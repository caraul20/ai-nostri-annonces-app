'use client';

import { useState } from 'react';
import { Upload, X, Image as ImageIcon, Link as LinkIcon } from 'lucide-react';
import { Button } from '@/components/ui/button';
import Image from 'next/image';
  disabled?: boolean;
}

export default function ImageUploader({ 
  images, 
  onImagesChange, 
  maxImages = 5,
  disabled = false 
}: ImageUploaderProps) {
  const [uploading, setUploading] = useState(false);
  const [uploadProgress, setUploadProgress] = useState<{ [key: string]: number }>({});
  const fileInputRef = useRef<HTMLInputElement>(null);

  const handleFileSelect = async (e: React.ChangeEvent<HTMLInputElement>) => {
    const files = Array.from(e.target.files || []);
    if (files.length === 0) return;

    // Vérifier le nombre maximum d'images
    if (images.length + files.length > maxImages) {
      alert(`Vous ne pouvez télécharger que ${maxImages} images maximum.`);
      return;
    }

    setUploading(true);
    const newImages: string[] = [];

    try {
      for (let i = 0; i < files.length; i++) {
        const file = files[i];
        
        // Vérifier le type de fichier
        if (!file.type.startsWith('image/')) {
          alert(`Le fichier ${file.name} n'est pas une image valide.`);
          continue;
        }

        // Vérifier la taille (max 5MB)
        if (file.size > 5 * 1024 * 1024) {
          alert(`Le fichier ${file.name} est trop volumineux (max 5MB).`);
          continue;
        }

        const fileId = `${Date.now()}-${i}`;
        setUploadProgress(prev => ({ ...prev, [fileId]: 0 }));

        try {
          // Simuler l'upload avec un délai
          setUploadProgress(prev => ({ ...prev, [fileId]: 30 }));
          await new Promise(resolve => setTimeout(resolve, 500));
          
          setUploadProgress(prev => ({ ...prev, [fileId]: 60 }));
          await new Promise(resolve => setTimeout(resolve, 300));
          
          // Créer une URL mock pour l'image
          const mockImageUrl = `https://via.placeholder.com/400x300/cccccc/666666?text=${encodeURIComponent(file.name)}`;
          
          setUploadProgress(prev => ({ ...prev, [fileId]: 90 }));
          await new Promise(resolve => setTimeout(resolve, 200));
          
          newImages.push(mockImageUrl);
          setUploadProgress(prev => ({ ...prev, [fileId]: 100 }));
          
        } catch (error) {
          console.error(`Erreur lors de l'upload de ${file.name}:`, error);
          alert(`Erreur lors de l'upload de ${file.name}. Veuillez réessayer.`);
        }
      }

      // Mettre à jour la liste des images
      onImagesChange([...images, ...newImages]);
      
    } finally {
      setUploading(false);
      setUploadProgress({});
      // Reset l'input file
      if (fileInputRef.current) {
        fileInputRef.current.value = '';
      }
    }
  };

  const removeImage = (index: number) => {
    const newImages = images.filter((_, i) => i !== index);
    onImagesChange(newImages);
  };

  const triggerFileInput = () => {
    fileInputRef.current?.click();
  };

  return (
    <div className="space-y-4">
      <div className="flex items-center justify-between">
        <label className="block text-sm font-medium text-gray-700">
          Images ({images.length}/{maxImages})
        </label>
        {images.length < maxImages && (
          <button
            type="button"
            onClick={triggerFileInput}
            disabled={disabled || uploading}
            className="inline-flex items-center px-3 py-2 border border-gray-300 shadow-sm text-sm leading-4 font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 disabled:opacity-50 disabled:cursor-not-allowed"
          >
            <Upload className="h-4 w-4 mr-2" />
            {uploading ? 'Upload...' : 'Ajouter des images'}
          </button>
        )}
      </div>

      {/* Input file caché */}
      <input
        ref={fileInputRef}
        type="file"
        multiple
        accept="image/*"
        onChange={handleFileSelect}
        className="hidden"
        disabled={disabled || uploading}
      />

      {/* Grille des images */}
      <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
        {images.map((imageUrl, index) => (
          <div key={index} className="relative group">
            <div className="aspect-square relative bg-gray-100 rounded-lg overflow-hidden">
              <Image
                src={imageUrl}
                alt={`Image ${index + 1}`}
                fill
                className="object-cover"
                sizes="(max-width: 768px) 50vw, (max-width: 1200px) 33vw, 25vw"
              />
              {!disabled && (
                <button
                  type="button"
                  onClick={() => removeImage(index)}
                  className="absolute top-2 right-2 bg-red-500 text-white rounded-full p-1 opacity-0 group-hover:opacity-100 transition-opacity hover:bg-red-600"
                >
                  <X className="h-4 w-4" />
                </button>
              )}
            </div>
          </div>
        ))}

        {/* Placeholder pour ajouter des images */}
        {images.length < maxImages && !disabled && (
          <button
            type="button"
            onClick={triggerFileInput}
            disabled={uploading}
            className="aspect-square border-2 border-dashed border-gray-300 rounded-lg flex flex-col items-center justify-center text-gray-500 hover:border-gray-400 hover:text-gray-600 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
          >
            <ImageIcon className="h-8 w-8 mb-2" />
            <span className="text-sm font-medium">
              {uploading ? 'Upload...' : 'Ajouter'}
            </span>
          </button>
        )}
      </div>

      {/* Barre de progression */}
      {Object.keys(uploadProgress).length > 0 && (
        <div className="space-y-2">
          {Object.entries(uploadProgress).map(([fileId, progress]) => (
            <div key={fileId} className="w-full bg-gray-200 rounded-full h-2">
              <div
                className="bg-green-600 h-2 rounded-full transition-all duration-300"
                style={{ width: `${progress}%` }}
              />
            </div>
          ))}
        </div>
      )}

      {/* Aide */}
      <div className="text-xs text-gray-500">
        <p>• Formats acceptés: JPG, PNG, GIF, WebP</p>
        <p>• Taille maximum: 5MB par image</p>
        <p>• Maximum {maxImages} images</p>
      </div>
    </div>
  );
}
